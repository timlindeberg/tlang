var i: Int = 1
var j: Int? = null

j = i
i = j // res: T2000

var k = 1

j = k
k = j // res: T2000

var a: A? = new A()
var b: A = new A()

a = b
b = a // res: T2000

val arr: Int?[] = {1, 2, null, 3}
val arr2: Int[] = {1, 2, null, 3} // res: T2000
val arr3 = {1, 2, null, 3}

j = MayReturnNull1(0)
i = MayReturnNull1(0) // res: T2000

j = MayReturnNull2(0)
i = MayReturnNull2(0) // res: T2000

j = MayReturnNull3(0)
i = MayReturnNull3(0) // res: T2000

// Should infer type Int?
Def MayReturnNull1(i: Int) =
    if (i < 5)
        return null
    else
        return 5

// Should infer type Int?
Def MayReturnNull2(i: Int) = i < 5 ? null : 5

// Should infer type Int?
Def MayReturnNull3(i: Int?) = i < 5 ? null : 5

Def DoesNotAcceptNullable(i: Int)


class A {}