var a = GetA()
var b = GetA()
a.Test() // res: F2000
if(a == null)
    return

a.Test()

a = GetA()

if(a != null)
    return

a.Test() // res: F2001

if(a == null || b == null) {
    a.Test() // res: F2001
    b.Test() // res: F2000
} else {
    a.Test() // res: F2001
    b.Test()
}

if(a == null || b == null)
    return

a.Test() // res: F2001
b.Test()

a = GetA()

if(a == null || a == b ) {
    a.Test() // res: F2000
    b.Test()
} else {
    a.Test()
    b.Test()
}

if(a == null)
    error("")

a.Test()

a = GetA()

for(var i = 0; i < 5; i++) {
   if(a == null)
       continue

   a.Test()
   a = GetA()
   if(a != null)
      continue

   a.Test() // res: F2001
}

for(var i = 0; i < 5; i++) {
   if(a == null)
       break

   a.Test()
   a = GetA()
   if(a != null)
      break

   a.Test() // res: F2001
}

var i = 0
a = GetA()
if(a != null){
    println()
    i = 1
} else {
    i = 1
    return
}

a.Test()

/*------------------------------------------------------------------------*/

Def GetA(): A? = null
Def GetB(): B? = null
Def GetArr(): Int[]? = null
Def GetNullableArr(): A?[] = return { new A(), null, new A() }

class A {

    Var static staticVar: A? = null

    Val b = true
    Var nullable: B? = null
    var i: Int = 0

    Def GetInt() = 5
    Def Test() = println("Test")

    Def GetBool() = true

    Def +(a: A, b: A) = 5
    Def <(a: A, b: A) = a.GetInt() < b.GetInt()
    Def ==(a: A, b: A) = a.b == b.b
    Def ++(a: A) = new A()
    Def #(a: A) = a.GetInt()
    Def [](index: Int) = GetInt() + index
    Def []=(index: Int, value: Int) = i = (index + value)

    Def Update() = println(5)

}

class B {

    Var static staticVar: A? = null
    Val bNullable: C? = null
    Def Test() = println("Test")

}

class C {

    Def Test() = println("Test")

}