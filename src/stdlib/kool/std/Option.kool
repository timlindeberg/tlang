package kool::std

class Option<T> {

	var isDefined: Bool
	var value: T

	var static none = new Option<T>()

	Def static Some(value: T) = new Option<T>(value)
	Def static None() = none

	Def new() = {}

	Def new(value: T) = {
        this.value = value
        isDefined = true
	}

	Def IsDefined() = isDefined

	Def Get() = {
		if(!isDefined)
			error("Cannot access value of undefined option.")
		value
	}

	Def ==(lhs: Option<T>, rhs: Option<T>) = {
		if(lhs.isDefined && rhs.isDefined)
			return lhs.value == rhs.value

		return !lhs.isDefined && !rhs.isDefined
	}

	Def !=(lhs: Option<T>, rhs: Option<T>) = !(lhs == rhs)

	Def #(option: Option<T>) = option.isDefined ? #option.value : 0

	Def toString() = isDefined ? "Some(" + value + ")" : "None"


}