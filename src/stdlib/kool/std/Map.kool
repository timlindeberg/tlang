package kool::std

import kool::std::MapEntry
import kool::std::Iterator

trait Map<K, V>: Collection<MapEntry<K, V>> {

    Def Add(key: K, value: V): Unit
    Def Get(key: K): V?
    Def Remove(key: K): Bool

    Def Keys(): Iterator<K>
    Def Values(): Iterator<V>

    //------------------------------------------------------------
    // Default methods
    //------------------------------------------------------------

    Def Add(entry: MapEntry<K, V>): Unit = Add(entry.Key(), entry.Value())
    Def Remove(entry: MapEntry<K, V>): Bool = Remove(entry.Key())
    Def Contains(entry: MapEntry<K, V>): Bool = {
        val v = Get(entry.Key())
        v && v == entry.Value()
    }

    Def Contains(key: K): Bool = Get(key) != null
    Def Contains(value: V): Bool = {
        for(var e in this)
            if(e.Value() == value)
                return true
        false
    }

    //------------------------------------------------------------
    // Operators
    //------------------------------------------------------------

    Def []=(key: K, value: V): Unit = Add(key, value)
    Def [](key: K): V = {
        val res = Get(key)

        if(!res)
            error("No such key: " + key)

        res!!
    }

}