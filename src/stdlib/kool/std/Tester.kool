package kool::std

class Tester<T> {

    // Private constructor
    //def new() = {}

    Def static Assert(condition: Bool) =
        if(!condition) error("Assertion failed.")

    Def static Assert(condition: Bool, message: String) =
        if(!condition) error("Assertion failed: " + message)

    Def static AssertTrue(condition: Bool) = Assert(condition)
    Def static AssertTrue(condition: Bool, message: String) = Assert(condition, message)
    Def static AssertFalse(condition: Bool) = Assert(!condition)
    Def static AssertFalse(condition: Bool, message: String) = Assert(!condition, message)

    Def static AssertEquals(actual: T?, expected: T?) = {
        val was = "did not equal"
        if(actual && expected && actual != expected)
            assertionFailed(actual.ToString(), expected.ToString(), was)

        if(!actual && expected)
            assertionFailed("null", expected.ToString(), was)

        if(actual && !expected)
            assertionFailed(actual.ToString(), "null", was)
    }


    Def static AssertNotEquals(actual: T?, expected: T?) = {
        val was = "was equal to"
        if(actual && expected && actual == expected)
            assertionFailed(actual.ToString(), expected.ToString(), was)

        if(!actual && !expected)
            assertionFailed("null", "null", was)
    }

    Def static Fail() = error("Test failed!")
    Def static Fail(message: String) = error("Test failed: " + message)

    def static assertionFailed(actual: String, expected: String, was: String) =
        error("Assertion failed: '" + actual + "' " + was + " '" + expected + "'.")
}