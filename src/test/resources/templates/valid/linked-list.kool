package kool.std;

import <LinkedList>;

main Program = {
	new Main().Run();
}

class Main {

	Def Run(): Unit = {
		var intList: 	  LinkedList<Integer> = new LinkedList<Integer>();
		var intList2: 	  LinkedList<Integer> = new LinkedList<Integer>();
		var stringList:   LinkedList<KoolString> = new LinkedList<KoolString>();
		var p: 			  ListPrinter<Integer, KoolString> = new ListPrinter<Integer, KoolString>(intList, stringList);
		var r:		      java.util.Random = new java.util.Random();

		var intSorter: 	  Sorter<LinkedList<Integer>, Integer> = new Sorter<LinkedList<Integer>, Integer>();
		var stringSorter: Sorter<LinkedList<KoolString>, KoolString> = new Sorter<LinkedList<KoolString>, KoolString>();
		var i:            Int;

		intList = intList + new Integer(r.nextInt(10000));
		for(i = 0; i < 100; i++){
        	intList += new Integer(r.nextInt(10000));
        }

		intSorter.sort(intList);

		p.PrintList("Random");
		intList.Clear();
		for(i = 0; i < 10; i++){
		    intList.Add(new Integer(i));
        	stringList.Add(0, new KoolString("s" + i + "s"));
		}

		p.PrintList("Add");

		for(i = 10; i > 0; i--){
		    intList.Push(new Integer(i));
        	stringList.Push(new KoolString("s" + i + "s"));
		}
		p.PrintList("Initial");

		i = 0;

		intList[2] = new Integer(15);
		intList[5] = new Integer(15);
		intList.Add(7, new Integer(15));

		stringList[2] = new KoolString("s" + 15 + "s");
		stringList[5] = new KoolString("s" + 15 + "s");
		stringList[7] = new KoolString("s" + 15 + "s");

		p.PrintList("Set 2, 5 and 7 to 15");

		intList.RemoveIndex(0);
	 	intList.Remove(new Integer(3));
	 	intList -= new Integer(4);
		intList.RemoveIndex(intList.Size() - 1);

		stringList.RemoveIndex(0);
		stringList.Remove(new KoolString("s" + 3 + "s"));
        stringList -= new KoolString("s" + 4 + "s");
		stringList.RemoveIndex(intList.Size() - 1);



	 	p.PrintList("Removed first, 3, and last");

		intSorter.sort(intList);
		stringSorter.sort(stringList);

		p.PrintList("Sorted");

		intList2 = new LinkedList<Integer>();

		for(i = 0; i < 10; i++){
			intList2.Push(new Integer(100 - i));
		}
		intList += intList2;

		intList.AddAll(0, intList2);
		p.PrintList("AddAll");

		println(intList2);
		intList2.Clear();
		println(intList2);

		intList2 = new LinkedList<Integer>(5, new Integer(5));
		intList.AddAll(0, intList2);

		p.PrintList("Constructor 2");

		println(intList.Contains(new Integer(100)));
		println(intList.Contains(new Integer(95)));
		println(intList.Contains(new Integer(101)));

        intSorter.sort(intList);
		println("----------------------------------------");
		println("-- Pop");
		println("----------------------------------------");
		println(intList);
		while(intList.Size() > 0){
			intList.Pop();
			println(intList);
		}

		intList.Clear();
		for(i = 0; i < 10; i++){
			intList.Push(new Integer(i));
        	intList2.Push(new Integer(i));
		}

		println(intList == intList2);
	}
}

class Integer {
	Var Value: Int;

	Def new(value: Int) = {
		Value = value;
	}

	Def toString(): String = {
		return "" + Value;
	}

	Def >(lhs: Integer, rhs: Integer): Bool = {
		return lhs.Value > rhs.Value;
	}

	Def ==(lhs: Integer, rhs: Integer): Bool = {
		return lhs.Value == rhs.Value;
	}
}

class KoolString {

	Var Value: String;

	Def new(value: String) = {
		Value = value;
	}

	Def toString(): String = {
		return Value;
	}

	Def >(lhs: KoolString, rhs: KoolString): Bool = {
		return true;
	}

	Def ==(lhs: KoolString, rhs: KoolString): Bool = {
		return lhs.Value == rhs.Value;
	}

}

class ListPrinter<T, U> {

	var l1: LinkedList<T>;
	var l2: LinkedList<U>;

	Def new(list1: LinkedList<T>, list2: LinkedList<U>) = {
		l1 = list1;
		l2 = list2;
	}

	Def PrintList(msg: String): Unit = {
		println("----------------------------------------");
		println("-- " + msg);
		println("----------------------------------------");
		println(l1);
		println(l2);
	}
}

class Sorter<Container, T> {

	Def sort(c: Container): Unit = {
		var i: Int
		var j: Int
		var x: T

        for(i = 1; i < c.Size(); i++){
            x = c[i]
        	j = i
        	while(j > 0 && c[j - 1] > x){
        		c[j] = c[j - 1]
        		j = j - 1
        	}
            c[j] = x
        }
	}
}

