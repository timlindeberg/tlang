package kool.std;

import <LinkedList>;

main Program = {
	new Main().Run();
}

class Main {

	Def Run(): Unit = {
		var intList: 	  LinkedList<Integer> = new LinkedList<Integer>();
		var intList2: 	  LinkedList<Integer> = new LinkedList<Integer>();
		var stringList:   LinkedList<KoolString> = new LinkedList<KoolString>();
		var p: 			  ListPrinter<Integer, KoolString> = new ListPrinter<Integer, KoolString>(intList, stringList);
		var r:		      java.util.Random = new java.util.Random();

		var intSorter: 	  Sorter<LinkedList<Integer>, Integer> = new Sorter<LinkedList<Integer>, Integer>();
		var stringSorter: Sorter<LinkedList<KoolString>, KoolString> = new Sorter<LinkedList<KoolString>, KoolString>();
		var i:            Int;
		var j:            Int;
		var k:            Int;

        i = j = k = 1;

        println("i: " + i);
        println("j: " + j);
        println("k: " + k);

		for(i = 0; i < 100; i++){
        	intList.Add(new Integer(r.nextInt(10000)));
        }

		intSorter.sort(intList);

		p.PrintList("Random");
		intList.Clear();
		for(i = 0; i < 10; i++){
		    intList.Add(new Integer(i));
        	stringList.Add(0, new KoolString("s" + i + "s"));
		}

		p.PrintList("Add");

		for(i = 10; i > 0; i--){
		    intList.Push(new Integer(i));
        	stringList.Push(new KoolString("s" + i + "s"));
		}
		p.PrintList("Initial");
		
		i = 0;

		intList.Set(2, new Integer(15));
		intList.Set(5, new Integer(15));
		intList.Add(7, new Integer(15));

		stringList.Set(2, new KoolString("s" + 15 + "s"));
		stringList.Set(5, new KoolString("s" + 15 + "s"));
		stringList.Add(7, new KoolString("s" + 15 + "s"));

		p.PrintList("Set 10 and 40 to 15");

		intList.Remove(0);
	 	intList.Remove(3);
		intList.Remove(intList.Size() - 1);

		stringList.Remove(0);
		stringList.Remove(3);
		stringList.Remove(intList.Size() - 1);
		
	 	p.PrintList("Removed first, 3, and last");

		intSorter.sort(intList);
		stringSorter.sort(stringList);

		p.PrintList("Sorted");
		
		intList2 = new LinkedList<Integer>();

		for(i = 0; i < 10; i++){
			intList2.Push(new Integer(100 - i));
		}
		intList.AddAll(5, intList2);

		intList.AddAll(0, intList2);
		p.PrintList("AddAll");

		println(intList2);
		intList2.Clear();
		println(intList2);

		intList2 = new LinkedList<Integer>(5, new Integer(5));
		intList.AddAll(0, intList2);

		p.PrintList("Constructor 2");

		println(intList.Contains(new Integer(100)));
		println(intList.Contains(new Integer(95)));
		println(intList.Contains(new Integer(101)));
        
        intSorter.sort(intList);
		println("----------------------------------------");
		println("-- Pop");
		println("----------------------------------------");
		println(intList);
		while(intList.Size() > 0){
			intList.Pop().Get().Get();
			println(intList);
		}

		intList.Clear();
		for(i = 0; i < 10; i++){
			intList.Push(new Integer(i));
        	intList2.Push(new Integer(i));
		}

		println(intList.Equals(intList2));
	}
}

class Integer {
	var i: Int;

	Def Integer(iarg: Int) = {
		i = iarg;
	}

	Def Set(iarg: Int): Unit = {
		i = iarg;
	}

	Def Get(): Int = {
		return i;
	}

	Def toString(): String = {
		return "" + i;
	}

	Def CompareTo(other: Integer): Int = {
		return i - other.Get();
	}

	Def Equals(other: Integer): Bool = {
		return i == other.Get();
	}
}

class KoolString {
	var s: String;

	Def KoolString(sarg: String) = {
		s = sarg;
	}

	Def Set(sarg: String): Unit = {
		s = sarg;
	}

	Def Get(): String = {
		return s;
	}

	Def toString(): String = {
		return s;
	}

	Def CompareTo(other: KoolString): Int = {
		return 1;
	}

	Def Equals(other: KoolString): Bool = {
		return s == other.Get();
	}

}

class ListPrinter<T, U> {

	var l1: LinkedList<T>;
	var l2: LinkedList<U>;

	Def ListPrinter(list1: LinkedList<T>, list2: LinkedList<U>) = {
		l1 = list1;
		l2 = list2;
	}

	Def PrintList(msg: String): Unit = {
		println("----------------------------------------");
		println("-- " + msg);
		println("----------------------------------------");
		println(l1);
		println(l2);
	}
}

class Sorter<Container, T> {
	
	Def sort(c: Container): Unit = {
		var i: Int;
		var j: Int;
		var N: Int = c.Size();
		var x: T;

        for(i = 1; i < N; i++){
            x = c.Get(i).Get();
        	j = i;
        	while(j > 0 && c.Get(j-1).Get().CompareTo(x) > 0){
        		c.Set(j, c.Get(j-1).Get());
        		j = j - 1;
        	}
            c.Set(j, x);
        }
	}
}
