object Program {
  def main () : Unit = {
    new Main().run();
  }
}

class Integer {
	var i: Int;

	def Integer(iarg: Int) = {
		i = iarg;
	}

	def set(iarg: Int): Unit = {
		i = iarg;
	}

	def get(): Int = {
		return i;
	}

	def toString(): String = {
		return "" + i;
	}

	def compareTo(other: Integer): Int = {
		return i - other.get();
	}

	def equals(other: Integer): Bool = {
		return i == other.get();
	}
}

class KoolString {
	var s: String;

	def KoolString(sarg: String) = {
		s = sarg;
	}

	def set(sarg: String): Unit = {
		s = sarg;
	}

	def get(): String = {
		return s;
	}

	def toString(): String = {
		return s;
	}

	def compareTo(other: KoolString): Int = {
		return 1;
	}

	def equals(other: KoolString): Bool = {
		return s == other.get();
	}

}

class ListPrinter[T, U] {

	var l1: List[T];
	var l2: List[U];

	def ListPrinter(list1: List[T], list2: List[U]) = {
		l1 = list1;
		l2 = list2;
	}

	def print(msg: String): Unit = {
		println("----------------------------------------");
		println("-- " + msg);
		println("----------------------------------------");
		println(l1);
		println(l2);
	}
}

class Main {
	def run(): Unit = {
		var p: 			  ListPrinter[Integer, KoolString];
		var intList: 	  List[Integer];
		var intList2: 	  List[Integer];
		var stringList:   List[KoolString];
		
		var intSorter: 	  Sorter[List[Integer], Integer];
		var stringSorter: Sorter[List[KoolString], KoolString];
		var i: 			  Int;

		intList = 	   new List[Integer]();
		stringList =   new List[KoolString]();
		intSorter =    new Sorter[List[Integer], Integer]();
		stringSorter = new Sorter[List[KoolString], KoolString]();
		p = 		   new ListPrinter[Integer, KoolString](intList, stringList);


		i = 0;
		while(i < 10){
			intList.add(0, new Integer(i));
			stringList.add(0, new KoolString("s" + i + "s"));
			i = i + 1;
		}

		p.print("Add");

		i = 10;
		while(0 < i){
			intList.push(new Integer(i));
			stringList.push(new KoolString("s" + i + "s"));
			i = i - 1;
		}
		p.print("Initial");
		
		i = 0;

		intList.set(2, new Integer(15));
		intList.set(5, new Integer(15));
		intList.add(7, new Integer(15));

		stringList.set(2, new KoolString("s" + 15 + "s"));
		stringList.set(5, new KoolString("s" + 15 + "s"));
		stringList.add(7, new KoolString("s" + 15 + "s"));

		p.print("Set 10 and 40 to 15");

		intList.remove(0);
	 	intList.remove(3);
		intList.remove(intList.size() - 1);

		stringList.remove(0);
		stringList.remove(3);
		stringList.remove(intList.size() - 1);
		
	 	p.print("Removed first, 3, and last");

		intSorter.sort(intList);
		stringSorter.sort(stringList);

		p.print("Sorted");
		
		intList2 = new List[Integer]();

		i = 0;
		while(i < 10){
			intList2.push(new Integer(100 - i));
			i = i + 1;
		}
		intList.addAll(5, intList2);

		intList.addAll(0, intList2);
		p.print("AddAll");

		println(intList2);
		intList2.clear();
		println(intList2);

		println(intList.contains(new Integer(100)));
		println(intList.contains(new Integer(95)));
		println(intList.contains(new Integer(101)));

		println("----------------------------------------");
		println("-- Pop");
		println("----------------------------------------");
		println(intList);
		while(intList.size() > 0){
			intList.pop().get().get();
			println(intList);
		}

		intList.clear();
		i = 0;
		while(i < 10){
			intList.push(new Integer(i));
			intList2.push(new Integer(i));
			i = i + 1;
		}

		println(intList.equals(intList2));
	}
}

class List[T] {
	
	var first: Option[Node[T]];
	var last:  Option[Node[T]];

	var size: Int; 

	def List() = {
		this.clear();
	}

	def initWith(newSize: Int, value: T): Unit = {
		var i: Int;

		while(i < newSize){
			this.push(value);
			i++;
		}
	}

	def isEmpty(): Bool = {
		return size == 0;
	}

	def clear(): Unit = {
		first = new Option[Node[T]]();
        last = new Option[Node[T]]();
        size = 0;
	}

	def first(): Option[Node[T]] = {
		return first;
	}

	def last(): Option[Node[T]] = {
		return last;
	}

	def iterator(): ListIterator[T] = {
		return new ListIterator[T](this);
	}

	def push(data: T): Unit = {
		var node: Node[T];

		node = new Node[T](data);
		if(!first.isDefined()){
			first.add(node);
			last = first;
		}else{
			node.setPrev(last.get());
			last.get().setNext(node);
			last = last.get().next();
		}
		size++;
	}

	def pop(): Option[T] = {
		var res: Option[T];

		res = new Option[T]();
		if(size <= 0)
		    return res;

		res.add(last.get().data());
		this.remove(size - 1);
		return res;
	}

	def add(index: Int, data: T): Bool = {
		var node: Option[Node[T]];
		var next: Option[Node[T]];
		var prev: Option[Node[T]];
		var op:	  Option[Node[T]];
		var elem: Node[T];
		var res:  Bool;

        if(index < 0 || index > size)
            return false;

        elem = new Node[T](data);
        if(index == size){
            this.push(data);
        }else if(index == 0){
            first.get().setPrev(elem);
            elem.setNext(first.get());
            op = new Option[Node[T]]();
            op.add(elem);
            first = op;
        }else{
            node = this.find(index);
            prev = node.get().prev();
            next = node.get().next();

            prev.get().setNext(elem);
            elem.setPrev(prev.get());

            elem.setNext(node.get());
            node.get().setPrev(elem);
        }
        size++;

		return true;
	}

	def addAll(index: Int, other: List[T]): Bool = {
		var it: ListIterator[T];

		it = other.iterator();
		while(it.hasNext()){
			if(!this.add(index, it.next()))
			    return false;
		}

		return true;
	}

	def remove(index: Int): Bool = {
		var node: 	Option[Node[T]];
		var next:	Option[Node[T]];
		var prev:	Option[Node[T]];

        if(size <= 0)
            return false;

		node = this.find(index);
		if(!node.isDefined())
		    return false;

        prev = node.get().prev();
        next = node.get().next();
        if(prev.isDefined() && next.isDefined()){
            // Node is in the middle of the list
            prev.get().setNext(next.get());
            next.get().setPrev(prev.get());
        }else if(prev.isDefined() && ! next.isDefined()){
            // Node is last element
            prev.get().clearNext();
            last = prev;
        }else if(!prev.isDefined() && next.isDefined()){
            // Node is first element
            next.get().clearPrev();
            first = next;
        }else{
            // Node is the only element
            this.clear();
        }
        size--;
		return true;
	}

	def get(index: Int): Option[T] = {
		var node: 	Option[Node[T]];
		var res:	Option[T];

		res = new Option[T]();
		node = this.find(index);
		if(node.isDefined()){
			res.add(node.get().data());
		}
		return res;
	}

	def set(index: Int, data: T): Bool = {
		var node: 	Option[Node[T]];

		node = this.find(index);
		if(node.isDefined()){
			node.get().setData(data);
			return true;
		}
		return false;
	}

	def indexOf(data: T): Int = {
		var i: 	   Int;
		var it:	   ListIterator[T];

		it = this.iterator();
		while(it.hasNext()){
			if(it.next().equals(data))
				return i;
			i++;
		}
		return -1;
	}

	def lastIndexOf(data: T): Int = {
		var index: Int;
		var i: 	   Int;
		var it:	   ListIterator[T];

		index = -1;
		it = this.iterator();
		while(it.hasNext()){
			if(it.next().equals(data))
				index = i;
			i++;
		}
		return index;
	}

	def contains(data: T): Bool = {
		return this.indexOf(data) != -1;
	}

	def find(index: Int): Option[Node[T]] = {
		var tmp: 	Option[Node[T]];
		var i: 		Int;

		tmp = new Option[Node[T]]();

		if(index < 0 || index >= size)
		    return tmp;
		if(index == 0)
		    return first;
		if(index == size - 1)
		    return last;

        if(index < (size / 2) + 1){
            tmp = first;
            i = 0;
            while(i < index && tmp.isDefined()){
                i++;
                tmp = tmp.get().next();
            }
        }else{
            tmp = last;
            i = size - 1;
            while(i > index && tmp.isDefined()){
                i--;
                tmp = tmp.get().prev();
            }
        }

		return tmp;
	}

    def toString(): String = {
        var it: ListIterator[T];
        var s: 	String;
        
        if(size == 0)
        	return "[]";

        it = this.iterator();
        s = "[ ";
        while(it.hasNext()){
            s = s + it.next().toString();
            if(it.hasNext()) s = s + ", ";
        }
        s = s + " ]";
        return s;
    }

	def size(): Int = {
		return size;
	}

	def equals(other: List[T]): Bool = {
		var thisIt:  ListIterator[T];
		var otherIt: ListIterator[T];
		var done:	 Bool;

        if(size != other.size())
            return false;

		thisIt = this.iterator();
		otherIt = other.iterator();
        while(thisIt.hasNext()){
            if(!thisIt.next().equals(otherIt.next()))
                return false;
        }

		return true;
	}
}

class Node[T] {
	var data: T;
	var next: Option[Node[T]];
	var prev: Option[Node[T]];

	def Node(d: T) = {
		data = d;
    	next = new Option[Node[T]]();
    	prev = new Option[Node[T]]();
	}

	def data(): T = {
		return data;
	}

	def next(): Option[Node[T]] = {
		return next;
	}

	def prev(): Option[Node[T]] = {
		return prev;
	}

	def setData(t: T): Unit = {
		data = t;
	}

	def clearNext(): Unit = {
		next = new Option[Node[T]]();
	}

	def clearPrev(): Unit = {
		prev = new Option[Node[T]]();
	}

	def setNext(n: Node[T]): Unit = {
		var o: Option[Node[T]];
		o = new Option[Node[T]]();
		o.add(n);
		next = o;
	}

	def setPrev(n: Node[T]): Unit = {
		var o: Option[Node[T]];
		o = new Option[Node[T]]();
		o.add(n);
		prev = o;
	}
}

class ListIterator[T] {
	var current: Node[T];
	var hasNext: Bool;

	def ListIterator(list: List[T]) = {
		if(list.first().isDefined()){
			hasNext = true;
			current = list.first().get();
		}else{
			hasNext = false;
		}
	}

	def hasNext(): Bool = {
		return hasNext;
	}

	def next(): T = {
		var res: T;
		res = current.data();
		hasNext = current.next().isDefined();
		if(hasNext){
			current = current.next().get();
		}
		return res;
	}
}

class Option[T] {
	var isDefined: Bool;
	var t: 		   T;

	def Option() = {
		isDefined = false;
	}

	def add(tArg: T): Unit = {
		t = tArg;
		isDefined = true;
	}

	def isDefined(): Bool = {
		return isDefined;
	}

	def get(): T = {
		return t;
	}
}

class Sorter[Container, T] {
	
	def sort(c: Container): Unit = {
		var i: Int;
		var j: Int;
		var x: T;
		i = 1;

		while(i < c.size()){
		    x = c.get(i).get();
			j = i;
			while(j > 0 && c.get(j-1).get().compareTo(x) > 0){
			    c.set(j, c.get(j-1).get());
				j = j - 1;
			}
			c.set(j, x);
			i = i + 1;
		}
	}
}
