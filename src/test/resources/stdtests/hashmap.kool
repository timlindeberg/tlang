import <kool.std.HashMap>
import <kool.std.Tester>

main HashMapTest = {
    Test.IntMap()
    Test.StringMap()
    Test.LargeMap()
    Test.InitialCapacity()
    Test.ToString()
    Test.Get()
    Test.ContainsKey()
    Test.ContainsValue()
    Test.Iterators()
    Test.Equals()
    Test.Remove()
    Test.AddAll()

    println("All tests succeded!")
}

class Test {

    var static ti: Tester<Int> = new Tester<Int>()
    var static ts: Tester<String> = new Tester<String>()
    var static to: Tester<Option<Int>> = new Tester<Option<Int>>()
    var static tb: Tester<Bool> = new Tester<Bool>()


    Def static IntMap(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        map[1] = 2
        ti.AssertEquals(map[1], 2)
        ti.AssertEquals(map.Size(), 1)
        map[1] = 3
        ti.AssertEquals(map[1], 3)
        ti.AssertEquals(map.Size(), 1)
        map[5] = 5
        ti.AssertEquals(map[5], 5)
        ti.AssertEquals(map.Size(), 2)
    }

    Def static StringMap(): Unit = {
        var map: HashMap<String, Int> = new HashMap<String, Int>()
        map["1"] = 2
        ti.AssertEquals(map["1"], 2)
        ti.AssertEquals(map.Size(), 1)
        map["1"] = 3
        ti.AssertEquals(map["1"], 3)
        ti.AssertEquals(map.Size(), 1)
        map["5"] = 5
        ti.AssertEquals(map["5"], 5)
        ti.AssertEquals(map.Size(), 2)
    }

    Def static LargeMap(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        for(var i: Int = 0; i < 5000; i++){
            map[i] = i + 1
            ti.AssertEquals(map.Size(), i + 1)
        }

        for(var i: Int = 0; i < 5000; i++)
            ti.AssertEquals(map[i], i + 1)
    }


    Def static InitialCapacity(): Unit = {
        testCapacity(1, 2)
        testCapacity(2, 2)
        testCapacity(3, 4)
        testCapacity(512, 512)
        testCapacity(513, 1024)
    }

    Def static ToString(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        map[1] = 5
        map[2] = 2
        map[64] = -1
        // when string comparison works:
        //ts.AssertEquals(map.toString(), "(1 -> 5)\n(2 -> 2)\n(64 -> -1)\n")
    }

    Def static Get(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        map[1] = 5
        map[2] = 4
        to.AssertEquals(map.Get(1), new Option<Int>(5))
        to.AssertEquals(map.Get(2), new Option<Int>(4))
        to.AssertEquals(map.Get(3), new Option<Int>())
    }

    Def static ContainsKey(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        map[1] = 5
        map[2] = 4
        tb.AssertEquals(map.ContainsKey(1), true)
        tb.AssertEquals(map.ContainsKey(2), true)
        tb.AssertEquals(map.ContainsKey(3), false)
    }

    Def static ContainsValue(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        map[1] = 5
        map[2] = 4
        tb.AssertEquals(map.ContainsValue(5), true)
        tb.AssertEquals(map.ContainsValue(4), true)
        tb.AssertEquals(map.ContainsValue(1), false)
    }

    Def static Iterators(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()
        var entries: Entry<Int, Int>[] = new Entry<Int, Int>[4]
        entries[0] = new Entry<Int, Int>(1, 1, 1)
        entries[1] = new Entry<Int, Int>(2, 6, 1)
        entries[2] = new Entry<Int, Int>(90, -5, 1)
        entries[3] = new Entry<Int, Int>(-2, 35, 1)

        for(var i: Int = 0; i < entries.length; i++){
            map[entries[i].Key] = entries[i].Value
        }

        var eit: EntryIterator<Int, Int> = map.EntryIterator()
        while(eit.HasNext()){
            var entry: Entry<Int, Int> = eit.Next()
            ti.Assert(containsEntry(entry, entries))
        }

        var kit: KeyIterator<Int, Int> = map.KeyIterator()
        while(kit.HasNext()){
            var key: Int = kit.Next()
            ti.Assert(containsKey(key, entries))
        }

        var vit: ValueIterator<Int, Int> = map.ValueIterator()
        while(vit.HasNext()){
            var value: Int = vit.Next()
            ti.Assert(containsValue(value, entries))
        }
    }

    Def static Equals(): Unit = {
        var map1: HashMap<Int, Int> = new HashMap<Int, Int>()
        var map2: HashMap<Int, Int> = new HashMap<Int, Int>()
        var map3: HashMap<Int, Int> = new HashMap<Int, Int>()
        var map4: HashMap<Int, Int> = new HashMap<Int, Int>()
        var map5: HashMap<Int, Int> = new HashMap<Int, Int>()

        map1[1] = 5
        map1[2] = 6
        map1[3] = 7
        map1[4] = 8

        map2[1] = 5
        map2[2] = 6
        map2[3] = 7
        map2[4] = 8

        map3[0] = 5
        map3[2] = 6
        map3[3] = 7
        map3[4] = 8

        map4[1] = 5
        map4[2] = 6
        map4[3] = 8
        map4[4] = 8

        map5[1] = 5
        map5[2] = 6
        map5[3] = 7

        ti.Assert(map1 == map2)
        ti.Assert(map2 == map1)

        ti.Assert(map1 != map3)
        ti.Assert(map1 != map4)
        ti.Assert(map1 != map5)

        ti.Assert(map2 != map3)
        ti.Assert(map2 != map4)
        ti.Assert(map2 != map5)

        ti.Assert(map3 != map1)
        ti.Assert(map3 != map2)
        ti.Assert(map3 != map4)
        ti.Assert(map3 != map5)

        ti.Assert(map4 != map1)
        ti.Assert(map4 != map2)
        ti.Assert(map4 != map3)
        ti.Assert(map4 != map5)

        ti.Assert(map5 != map1)
        ti.Assert(map5 != map2)
        ti.Assert(map5 != map3)
        ti.Assert(map5 != map4)
    }

    Def static Remove(): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>()

        map[5] = 10
        map[4] = 11
        map[3] = 12

        ti.AssertEquals(map.Size(), 3)
        ti.Assert(map.ContainsKey(5))
        ti.Assert(map.ContainsValue(10))
        ti.Assert(map.ContainsKey(4))
        ti.Assert(map.ContainsValue(11))
        ti.Assert(map.ContainsKey(3))
        ti.Assert(map.ContainsValue(12))

        var map2: HashMap<Int, Int> = map - 5

        ti.AssertEquals(map2.Size(), 2)
        ti.Assert(!map2.ContainsKey(5))
        ti.Assert(!map2.ContainsValue(10))
        ti.Assert(map2.ContainsKey(4))
        ti.Assert(map2.ContainsValue(11))
        ti.Assert(map2.ContainsKey(3))
        ti.Assert(map2.ContainsValue(12))

        map.Remove(5)

        ti.AssertEquals(map.Size(), 2)
        ti.Assert(!map.ContainsKey(5))
        ti.Assert(!map.ContainsValue(10))
        ti.Assert(map.ContainsKey(4))
        ti.Assert(map.ContainsValue(11))
        ti.Assert(map.ContainsKey(3))
        ti.Assert(map.ContainsValue(12))

        map.Remove(4)

        ti.AssertEquals(map.Size(), 1)
        ti.Assert(!map.ContainsKey(5))
        ti.Assert(!map.ContainsValue(10))
        ti.Assert(!map.ContainsKey(4))
        ti.Assert(!map.ContainsValue(11))
        ti.Assert(map.ContainsKey(3))
        ti.Assert(map.ContainsValue(12))

        map.Remove(3)

        ti.AssertEquals(map.Size(), 0)
        ti.Assert(!map.ContainsKey(5))
        ti.Assert(!map.ContainsValue(10))
        ti.Assert(!map.ContainsKey(4))
        ti.Assert(!map.ContainsValue(11))
        ti.Assert(!map.ContainsKey(3))
        ti.Assert(!map.ContainsValue(12))

        map.Remove(2)

        ti.AssertEquals(map.Size(), 0)
        ti.Assert(!map.ContainsKey(5))
        ti.Assert(!map.ContainsValue(10))
        ti.Assert(!map.ContainsKey(4))
        ti.Assert(!map.ContainsValue(11))
        ti.Assert(!map.ContainsKey(3))
        ti.Assert(!map.ContainsValue(12))
    }

    Def static AddAll(): Unit = {
        var map1: HashMap<Int, Int> = new HashMap<Int, Int>()
        var map2: HashMap<Int, Int> = new HashMap<Int, Int>()

        map1[1] = 2
        map1[2] = 3

        map2[2] = 3
        map2[3] = 4
        map2[4] = 5

        map1.AddAll(map2)
        ti.AssertEquals(map1.Size(), 4)
        tb.AssertEquals(map1.ContainsKey(1), true)
        tb.AssertEquals(map1.ContainsKey(2), true)
        tb.AssertEquals(map1.ContainsKey(3), true)
        tb.AssertEquals(map1.ContainsKey(4), true)

        tb.AssertEquals(map1.ContainsValue(2), true)
        tb.AssertEquals(map1.ContainsValue(3), true)
        tb.AssertEquals(map1.ContainsValue(4), true)
        tb.AssertEquals(map1.ContainsValue(5), true)

        map2.AddAll(map1)

        tb.Assert(map1 == map2)
    }

    def static testCapacity(given: Int, expected: Int): Unit = {
        var map: HashMap<Int, Int> = new HashMap<Int, Int>(given, 0.75)
        ti.AssertEquals(map.Capacity(), expected)
    }

    def static containsEntry(entry: Entry<Int, Int>, entries: Entry<Int, Int>[]): Bool = {
        for(var i: Int = 0; i < entries.length; i++){
            if(entries[i] == entry)
                return true
        }
        return false;
    }

    def static containsKey(key: Int, entries: Entry<Int, Int>[]): Bool = {
        for(var i: Int = 0; i < entries.length; i++){
            if(entries[i].Key == key)
                return true
        }
        return false;
    }

     def static containsValue(value: Int, entries: Entry<Int, Int>[]): Bool = {
        for(var i: Int = 0; i < entries.length; i++){
            if(entries[i].Value == value)
                return true
        }
        return false;
    }

}