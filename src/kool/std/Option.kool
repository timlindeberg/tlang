package kool.std

class Option<T> {

	var isDefined: Bool = false
	var value: 	   T

	Def static Some(value: T): Option<T> = return new Option<T>(value)
	Def static None(): Option<T> = return new Option<T>()

	Def new() = {}

	Def new(value: T) = Add(value)

	Def ==(lhs: Option<T>, rhs: Option<T>): Bool = {
		if(lhs.isDefined && rhs.isDefined)
			return lhs.value == rhs.value

		if(!lhs.isDefined && !rhs.isDefined)
			return true

		return false
	}

	Def !=(lhs: Option<T>, rhs: Option<T>): Bool = return !(lhs == rhs)

	Def Add(value: T): Unit = {
		this.value = value
		isDefined = true
	}

	Def IsDefined(): Bool = return isDefined

	Def Value(): T = {
		if(!isDefined)
			error("Cannot access value of undefined option.")
		return value
	}

	Def toString(): String = return isDefined ? "Some(" + value + ")" : "None"


}