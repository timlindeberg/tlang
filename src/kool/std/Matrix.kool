package kool.std

class Matrix<T> {

    var rows: Int
    var columns: Int
    var data: MatrixRow<T>[]

    Def new(size: Int)               = init(size, size)
    Def new(rows: Int, columns: Int) = init(rows, columns)

    Def [](index: Int): MatrixRow<T> = return data[index]
    Def []=(index: Int, row: T[]): Unit = data[index] = new MatrixRow<T>(row)

    Def +(lhs: Matrix<T>, rhs: Matrix<T>): Matrix<T> = {
        if(lhs.rows != rhs.rows || lhs.columns != rhs.columns)
            errorInvalidDimensions(lhs, rhs)

        var m: Matrix<T> = new Matrix<T>(lhs.columns, lhs.rows)

        for(var i: Int = 0; i < m.columns; i++)
            for(var j: Int = 0; j < m.rows; j++)
                m[i][j] = lhs[i][j] + rhs[i][j]

        return m
    }

    Def -(lhs: Matrix<T>, rhs: Matrix<T>): Matrix<T> = {
        if(lhs.rows != rhs.rows || lhs.columns != rhs.columns)
            errorInvalidDimensions(lhs, rhs)

        var m: Matrix<T> = new Matrix<T>(lhs.columns, lhs.rows)
        for(var i: Int = 0; i < m.columns; i++)
            for(var j: Int = 0; j < m.rows; j++)
                m[i][j] = lhs[i][j] - rhs[i][j]

        return m
    }

    Def *(matrix: Matrix<T>, scalar: T): Matrix<T> = return scalar * matrix
    Def *(scalar: T, matrix: Matrix<T>): Matrix<T> = {
        var m: Matrix<T> = new Matrix<T>(matrix.columns, matrix.rows)
        for(var i: Int = 0; i < m.columns; i++)
           for(var j: Int = 0; j < m.rows; j++)
                m[i][j] = scalar * matrix[i][j]

        return m
    }

    Def *(lhs: Matrix<T>, rhs: Matrix<T>): Matrix<T> = {
        if(lhs.columns != rhs.rows)
            errorInvalidDimensions(lhs, rhs)

        var m: Matrix<T> = new Matrix<T>(lhs.rows, lhs.columns)
        for(var i: Int = 0; i < m.columns; i++)
            for(var j: Int = 0; j < m.rows; j++)
                for(var k: Int = 0; k < lhs.columns; k++)
                    m[i][j] += lhs[i][k] * rhs[k][j]

        return m
    }

    Def -(matrix: Matrix<T>): Matrix<T> = return -1 * matrix

    Def Transpose(): Matrix<T> = {
        var m: Matrix<T> = new Matrix<T>(columns, rows)
        for(var i: Int = 0; i < columns; i++)
           for(var j: Int = 0; j < rows; j++)
               m[i][j] = data[j][i]

        return m
    }

    Def Columns(): Int = return columns
    Def Rows(): Int = return rows

    Def toString(): String = {
        if(columns == 0 || rows == 0)
            return "[]"

        var s: String = ""
        for(var i: Int = 0; i < rows; i++)
            s += data[i] + "\n"
        return s
    }

    def init(rows: Int, columns: Int): Unit = {
        this.columns = columns
        this.rows = rows
        data = new MatrixRow<T>[rows]
        for(var i: Int = 0; i < rows; i++)
            data[i] = new MatrixRow<T>(columns)
    }

    def errorInvalidDimensions(m1: Matrix<T>, m2: Matrix<T>) =
        error("Invalid dimensions for matrix operaton: (" + m1.rows + ", " + m1.columns + ") and (" + m2.rows + ", " + m2.columns + ").")
}

class MatrixRow<T> {

    var data: T[]

    Def new(w: Int) = data = new T[w]
    Def new(d: T[]) = data = d

    Def [](index: Int): T = return data[index]

    Def []=(index: Int, value: T): Unit = data[index] = value

    Def toString(): String = {
        if(data.length == 0)
            return "[]"

        var s: String = "[ "
        for(var i: Int = 0; i < data.length; i++)
            s += data[i] + " "
        s += "]"
        return s
    }

}