package a::b::c

import java::util::ArrayList
import kool::lang::*
import kool::lang::extension java::lang::String

class Class<T> : T, B, C {

    var a: Int = 0
    Var b = 1
    protected val c: Long
    static Val d: Float = "hej"

    def implicit new(a: Double, b: String[]) = {}

    Def +(a: Class<T>, b: Class<T>): Class<T> = {}

    static def Func2(): Unit = {}

    Def Func(d: Boolean?, e: Char) = {
        if(!a < #b && -a <= ~b && a!! > ++b && a++ >= --b)
           println(a + b)
        else
            print(a - b)

        while(a-- == b || a != b)
            error(a * b)

        for(var i = 0; i < 5; i++)
            continue

        for(var x in b)
            break

        Func2(a / b)
        var a = {
            1 % 1l,
            1.0 & 1.3-e5f,
            10 | 5,
            1.0 ^ 'a',
           "hej" << true,
            false << null
        }


        A?.Func(a[b])
        this.Func(a[:])
        a.Func(a[1:2:3])
        super.Func(a[:2])
        a[b]
        a[:]
        a[b] = c as Int

        a = a[1:]
        a.b = a[1:2:]
        c = new Int[5]
        d = a is String ? b : (c ?: 5)
        d = new String(5, 7)
        return d
    }

}

trait B {


}

extension Int {   }