package tlang
package compiler
package argument

import tlang.formatting.{ErrorStringContext, Formatter}
import tlang.options.ArgumentFlag
import tlang.options.argument.HelpFlag

case object PrintOutputFlag extends ArgumentFlag[Set[String]] {
  override val name = "printoutput"
  override val argDescription = "phase"

  private lazy val compilerPhases = Main.CompilerPhases.map(_.phaseName)

  override def description(implicit formatter: Formatter): String =
    s"""
       |Prints the output after a given compiler phase.
       |If no argument is given the code is printed as it looks before the final code is generated (after the lowering phase).
       |Type ${ flag(CompilerHelpFlag) } ${ highlight(name) } for more information.
      """

  override def extendedDescription(implicit formatter: Formatter): String =
    s"""
       |The ${ flag(this) } flag prints the output after a given compiler phase.
       |This can be the tokens produced by the Lexer, a pretty printed and formatted AST or the
       |byte code generated by the Codegenerating phase.
       |The compiler phase are executed in the following order:
       |
       |$phases
       |
       |All these phase can be used as arguments.
       |If no argument is given the code is printed as it looks before the final code is generated (after the Lowering phase).
       |
       |Example: ${ flag(this) } ${ highlight("lexer") },${ highlight("desugaring") },${ highlight("codegeneration") }
      """

  override protected def verify(arg: String)(implicit errorContext: ErrorStringContext): Unit = {
    val phase = arg.toLowerCase
    import errorContext.ErrorStringContext
    if (phase notIn compilerPhases) {
      val suggestion = errorContext.suggestion(phase, compilerPhases.toList)
      error(err"$phase is not a valid argument for --$name.${ suggestion }See --${ HelpFlag.Name } for more information.")
    }
  }

  override def parseValue(args: Set[String]): Set[String] = args.map(_.toLowerCase)

  private def phases(implicit formatter: Formatter): String = {
    import formatter._
    formatter.list(Main.CompilerPhases.map(phase => Blue(phase.phaseName.capitalize)))
  }
}
